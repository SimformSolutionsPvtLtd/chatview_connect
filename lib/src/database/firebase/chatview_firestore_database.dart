import 'dart:collection';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_chatview_models/flutter_chatview_models.dart';
import 'package:rxdart/rxdart.dart';
import 'package:uuid/uuid.dart';

import '../../chatview_db_connection.dart';
import '../../enum.dart';
import '../../extensions.dart';
import '../../models/chat_room_dm.dart';
import '../../models/chat_room_metadata_model.dart';
import '../../models/chat_room_user_dm.dart';
import '../../models/chat_view_participants_dm.dart';
import '../../models/config/add_message_config.dart';
import '../../models/config/chat_database_path_config.dart';
import '../../models/config/chat_view_firestore_path_config.dart';
import '../../models/message_dm.dart';
import '../../models/user_chat_dm.dart';
import '../../models/user_chats_conversation_dm.dart';
import '../../typedefs.dart';
import '../database_service.dart';
import 'chatview_firestore_collections.dart';

/// provides methods for getting, adding, updating and deleting message
/// and messages streams from Firebase Firestore.
final class ChatViewFireStoreDatabase implements DatabaseService {
  static const String _typingStatus = 'typing_status';
  static const String _status = 'status';
  static const String _reaction = 'reaction';
  static const String _updateAt = 'update_at';
  static const String _update = 'update';
  static const String _lastMessage = 'last_message';
  static const String _groupName = 'group_name';
  static const String _groupPhotoUrl = 'group_photo_url';
  static const String _createdAt = 'createdAt';
  static const String _membershipStatus = 'membership_status';
  static const String _membershipStatusTimestamp =
      'membership_status_timestamp';

  ChatFirestoreDatabasePathConfig get _chatDatabaseConfig =>
      ChatViewDbConnection.instance.getFirestoreDatabasePathConfig;

  String? get _userCollection => _chatDatabaseConfig.userCollectionPath;

  ChatViewFireStoreCollectionNameConfig get _firestorePathConfig =>
      ChatViewDbConnection.instance.getFirestoreCollectionPathConfig;

  String _chatRoomCollectionPath(String chatId) {
    final collectionPath = '${_firestorePathConfig.chats}/$chatId';
    assert(
      collectionPath.isValidFirestoreDocumentName,
      'invalid Firestore document path provided',
    );
    return collectionPath;
  }

  CollectionReference<Message?> _messageCollectionRef(String chatId) =>
      ChatViewFireStoreCollections.messageCollection(
        _chatRoomCollectionPath(chatId),
      );

  CollectionReference<ChatUser?> _usersCollectionRef() =>
      ChatViewFireStoreCollections.usersCollection(_userCollection);

  @override
  Future<Message?> addMessage({
    required String chatId,
    required Message message,
    required bool useAutoGeneratedId,
    required AddMessageConfig addMessageConfig,
  }) async {
    final url = await addMessageConfig.uploadDocumentFromMessage(message);
    final messageCollectionRef = _messageCollectionRef(chatId);
    final newMessage = message.copyWith(
      message: url,
      updateAt: message.createdAt,
      status: MessageStatus.delivered,
    );

    Message? updatedMessage;

    if (useAutoGeneratedId) {
      final result = await messageCollectionRef.add(newMessage);
      updatedMessage = newMessage.copyWith(id: result.id);
    } else {
      await messageCollectionRef.doc(newMessage.id).set(newMessage);
      updatedMessage = newMessage;
    }

    return updatedMessage;
  }

  @override
  Stream<List<MessageDm>> getMessagesStreamWithSnapshot({
    required String chatId,
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
    DocumentSnapshot<Message?>? startAfterDocument,
    DateTime? startFromDateTime,
  }) {
    final messageCollectionRef = _messageCollectionRef(chatId).toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
      startAfterDocument: startAfterDocument,
      whereFieldName: _createdAt,
      whereFieldIsGreaterThanOrEqualTo: startFromDateTime,
    );

    return messageCollectionRef.snapshots().distinct().map(
      (docSnapshot) {
        final messages = docSnapshot.docs;
        final messagesLength = messages.length;
        return [
          for (var i = 0; i < messagesLength; i++)
            if (messages[i].data() case final message?)
              MessageDm(
                message: message.copyWith(id: messages[i].id),
                snapshot: messages[i],
              ),
        ];
      },
    );
  }

  @override
  Stream<List<Message>> getMessagesStream({
    required String chatId,
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
    DocumentSnapshot<Message?>? startAfterDocument,
    DateTime? startFromDateTime,
  }) {
    final messageCollectionRef = _messageCollectionRef(chatId).toMessageQuery(
      limit: limit,
      sortBy: sortBy,
      sortOrder: sortOrder,
      whereFieldName: _createdAt,
      startAfterDocument: startAfterDocument,
      whereFieldIsGreaterThanOrEqualTo: startFromDateTime,
    );

    return messageCollectionRef.snapshots().distinct().map(
      (docSnapshot) {
        final messages = docSnapshot.docs;
        final messagesLength = messages.length;
        return [
          for (var i = 0; i < messagesLength; i++)
            if (messages[i].data() case final message?) message,
        ];
      },
    );
  }

  @override
  Stream<Map<Message, DocumentType>> getMessagesStreamWithOperationType({
    required String chatId,
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
  }) {
    final messageCollectionRef = _messageCollectionRef(chatId).toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
    );

    return messageCollectionRef.snapshots().distinct().map(
      (docSnapshot) {
        final messagesChanges = docSnapshot.docChanges;
        final messagesChangesLength = messagesChanges.length;
        final messages = <Message, DocumentType>{};
        for (var i = 0; i < messagesChangesLength; i++) {
          final changedDoc = messagesChanges[i];
          final messageDoc = changedDoc.doc;
          final message = messageDoc.data()?.copyWith(id: messageDoc.id);
          if (message == null) continue;
          messages[message] = changedDoc.type.toDocumentType();
        }
        return messages;
      },
    );
  }

  @override
  Future<List<MessageDm>> getMessages({
    required String chatId,
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
    DocumentSnapshot<Message?>? startAfterDocument,
  }) async {
    final messageCollectionRef = _messageCollectionRef(chatId).toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
      startAfterDocument: startAfterDocument,
    );

    final result = await messageCollectionRef.get();
    final docs = result.docs;
    final docsLength = docs.length;
    return [
      for (var i = 0; i < docsLength; i++)
        if (docs[i].data() case final message?)
          MessageDm(
            message: message.copyWith(id: docs[i].id),
            snapshot: docs[i],
          ),
    ];
  }

  @override
  Future<bool> deleteMessage({
    required String chatId,
    required Message message,
    required DeleteDocumentCallback onDeleteDocument,
    required bool deleteImageFromStorage,
    required bool deleteVoiceFromStorage,
  }) async {
    final messageType = message.messageType;
    if (messageType.isImage && deleteImageFromStorage) {
      await onDeleteDocument(message);
    } else if (messageType.isVoice && deleteVoiceFromStorage) {
      await onDeleteDocument(message);
    }
    await _messageCollectionRef(chatId).doc(message.id).delete();
    return true;
  }

  @override
  Future<void> updateMessage({
    required String userId,
    required String chatId,
    required Message message,
    MessageStatus? messageStatus,
    UserReactionCallback? userReaction,
  }) async {
    final isReactionRemoved = message.reaction.reactions.isEmpty;
    final updateData = <String, dynamic>{
      if (messageStatus != null) _status: '',
      if (userReaction != null && !isReactionRemoved) _reaction: userId,
    };

    final data = <String, dynamic>{
      if (messageStatus case final status?) _status: status.name,
      if (userReaction != null) ...{
        _reaction: message.reaction.toJson(),
        _updateAt: isReactionRemoved
            ? Timestamp.fromDate(message.createdAt)
            : FieldValue.serverTimestamp(),
      },
      _update: updateData,
    };

    if (data.isEmpty) return;

    await _messageCollectionRef(chatId).doc(message.id).update(data);
  }

  @override
  Stream<List<ChatRoomUserDm>> getChatRoomParticipantsStream({
    required String userId,
    required String chatId,
    bool includeCurrentUser = true,
    int? limit,
  }) {
    final collectionPath = _chatRoomCollectionPath(chatId);

    final currentChatID = collectionPath.chatId ?? '';

    if (currentChatID.isEmpty) {
      return Stream.error('Chat ID not found from path: $collectionPath');
    }

    final userCollection =
        ChatViewFireStoreCollections.chatUsersCollection(collectionPath)
            .toQuery(limit: limit);

    return userCollection.snapshots().switchMap(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        if (docs.isEmpty) {
          return Stream.error('No users found in chat ID: $currentChatID');
        }
        final docsLength = docs.length;
        final listOfChatUserStream = <Stream<ChatRoomUserDm>>[];
        for (var i = 0; i < docsLength; i++) {
          final doc = docs[i];
          final chatUserId = doc.id;
          if (!includeCurrentUser && chatUserId == userId) {
            continue;
          }
          final chatRoomUser = doc.data();
          if (chatRoomUser == null) continue;
          listOfChatUserStream.add(
            _getUserInfoWithStatusStream(chatUserId).map(
              (userResult) => chatRoomUser.copyWith(
                chatUser: userResult.user,
                userActiveStatus: userResult.userActiveStatus,
              ),
            ),
          );
        }
        return listOfChatUserStream.isEmpty
            ? Stream.value([])
            : Rx.combineLatestList(listOfChatUserStream);
      },
    );
  }

  @override
  Stream<List<ChatUser>> getUsersStream({int? limit}) {
    final userCollection = _usersCollectionRef().toQuery(limit: limit);

    return userCollection.snapshots().map(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        final docsLength = docs.length;
        return <ChatUser>[
          for (var i = 0; i < docsLength; i++)
            if (docs[i].data() case final chatUser?) chatUser,
        ];
      },
    );
  }

  @override
  Future<List<ChatUser>> getUsers({int? limit}) async {
    final userCollection = _usersCollectionRef().toQuery(limit: limit);
    final userSnapshot = await userCollection.get();
    final docs = userSnapshot.docs;
    final docsLength = docs.length;
    return <ChatUser>[
      for (var i = 0; i < docsLength; i++)
        if (docs[i].data() case final chatUser?) chatUser,
    ];
  }

  @override
  Stream<ChatUser?> getUserStreamById({required String userId}) {
    return _usersCollectionRef()
        .doc(userId)
        .snapshots()
        .distinct((previous, next) => previous.data() == next.data())
        .map((chatUserDoc) => chatUserDoc.data());
  }

  @override
  Future<ChatViewParticipantsDm?> getChatRoomParticipants({
    required String chatId,
    required String userId,
  }) async {
    final chatRoomResult =
        await ChatViewFireStoreCollections.chatCollection().doc(chatId).get();

    final chatRoom = chatRoomResult.data();

    if (chatRoom == null) return null;

    final results = await _getChatRoomUsersWithDetails(
      chatId: chatId,
      userId: userId,
    );
    final resultsLength = results.length;

    ChatUser? currentUser;
    final otherUsers = <ChatUser>[];

    for (var i = 0; i < resultsLength; i++) {
      final user = results[i].chatUser;
      if (user == null) continue;
      if (user.id == userId) {
        currentUser = user;
      } else {
        otherUsers.add(user);
      }
    }

    if (currentUser == null || otherUsers.isEmpty) return null;

    return ChatViewParticipantsDm(
      chatRoomType: chatRoom.chatRoomType,
      groupName: chatRoom.groupName,
      groupPhotoUrl: chatRoom.groupPhotoUrl,
      currentUser: currentUser,
      otherUsers: otherUsers,
    );
  }

  @override
  Future<void> updateChatRoomUserMetadata({
    required String chatId,
    required String userId,
    TypeWriterStatus? typingStatus,
    MembershipStatus? membershipStatus,
    Map<String, dynamic>? chatRoomUserData,
  }) async {
    final data = chatRoomUserData ??
        <String, dynamic>{
          if (typingStatus case final status?) _typingStatus: status.name,
          if (membershipStatus case final status?) ...{
            _membershipStatus: status.name,
            _membershipStatusTimestamp: FieldValue.serverTimestamp(),
          },
        };

    if (data.isEmpty) return;

    return ChatViewFireStoreCollections.chatUsersCollection(
      _chatRoomCollectionPath(chatId),
    ).doc(userId).update(data);
  }

  @override
  Future<bool> updateUserActiveStatus({
    required String userId,
    required UserActiveStatus userStatus,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatCollection()
          .doc(userId)
          .update(UserChatDm(userActiveStatus: userStatus).toJson());
      return true;
    } on FirebaseException catch (exception) {
      switch (FirestoreExceptionType.fromCode(exception.code)) {
        case FirestoreExceptionType.notFound:
          return _setCurrentUserStatus(userId: userId);
        case FirestoreExceptionType.unknown:
          return false;
      }
    }
  }

  Future<bool> _setCurrentUserStatus({
    String? userId,
    UserActiveStatus userStatus = UserActiveStatus.offline,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatCollection()
          .doc(userId)
          .set(UserChatDm(userActiveStatus: userStatus));
      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Stream<Map<String, ChatRoomUserDm>> getChatRoomUsersMetadataStream({
    required String chatId,
    required String userId,
    required bool observeUserInfoChanges,
    int? limit,
  }) {
    final userCollection = ChatViewFireStoreCollections.chatUsersCollection(
      _chatRoomCollectionPath(chatId),
    ).toQuery(limit: limit);

    return userCollection.snapshots().switchMap(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        final docsLength = docs.length;
        final users = <String, ChatRoomUserDm>{};
        for (var i = 0; i < docsLength; i++) {
          final chatRoomUser = docs[i].data();
          if (chatRoomUser == null) continue;
          final chatUserId = chatRoomUser.userId;
          if (chatUserId == userId) continue;
          users[chatUserId] = chatRoomUser;
        }
        if (!observeUserInfoChanges) return Stream.value(users);

        final newUsers = users.values.toList();
        final usersLength = newUsers.length;
        final chatRoomUserStreamWithInfo = <Stream<ChatRoomUserDm>>[
          for (var i = 0; i < usersLength; i++)
            if (newUsers[i] case final chatRoomUser)
              _getUserInfoWithStatusStream(chatRoomUser.userId).map(
                (userResult) {
                  final user = chatRoomUser.copyWith(
                    chatUser: userResult.user,
                    userActiveStatus: userResult.userActiveStatus,
                  );
                  users[chatRoomUser.userId] = user;
                  return user;
                },
              ),
        ];

        return Rx.combineLatest(chatRoomUserStreamWithInfo, (_) => users);
      },
    );
  }

  Future<List<ChatRoomUserDm>> _getChatRoomUsersWithDetails({
    required String chatId,
    required String userId,
    bool includeCurrentUser = true,
  }) async {
    final collectionPath = _chatRoomCollectionPath(chatId);

    final currentChatID = collectionPath.chatId ?? '';

    if (currentChatID.isEmpty) {
      return throw Exception('Chat ID not found from path: $collectionPath');
    }

    final userCollectionSnapshot =
        await ChatViewFireStoreCollections.chatUsersCollection(collectionPath)
            .get();

    final docs = userCollectionSnapshot.docs;
    if (docs.isEmpty) {
      throw Exception('No users found in chat ID: $currentChatID');
    }

    final docsLength = docs.length;
    final chatRoomUsers = <String, ChatRoomUserDm>{};
    final chatRoomUsersInfoFutures = <Future<void>>[];

    for (var i = 0; i < docsLength; i++) {
      final doc = docs[i];
      final chatUserId = doc.id;
      if (!includeCurrentUser && chatUserId == userId) {
        continue;
      }
      final chatRoomUser = doc.data();
      if (chatRoomUser == null) continue;
      chatRoomUsers[chatUserId] = chatRoomUser;
      chatRoomUsersInfoFutures.add(
        _usersCollectionRef().doc(chatUserId).get().then(
          (chatUserDoc) {
            final userData = chatUserDoc.data() ??
                ChatUser(id: chatUserId, name: 'Unknown User');
            final chatRoomUser = chatRoomUsers[chatUserId];
            if (chatRoomUser != null) {
              chatRoomUsers[chatUserId] =
                  chatRoomUser.copyWith(chatUser: userData);
            }
          },
        ),
      );
    }

    await Future.wait(chatRoomUsersInfoFutures);
    return chatRoomUsers.values.toList();
  }

  @override
  Stream<int> getUnreadMessagesCount({
    required String chatId,
    required String userId,
    DateTime? startMessageFromDateTime,
  }) {
    final chatRoomCollectionRef = _messageCollectionRef(chatId).toMessageQuery(
      sortBy: MessageSortBy.none,
      sortOrder: MessageSortOrder.desc,
      whereFieldName: _createdAt,
      whereFieldIsGreaterThanOrEqualTo:
          startMessageFromDateTime?.toIso8601String(),
    );

    return chatRoomCollectionRef.snapshots().map(
      (messageSnapshot) {
        final docs = messageSnapshot.docs;
        final docsLength = docs.length;
        var count = 0;
        for (var i = 0; i < docsLength; i++) {
          final message = docs[i].data();
          if (message == null ||
              message.sentBy == userId ||
              message.status.isRead) {
            continue;
          }
          count++;
        }
        return count;
      },
    );
  }

  @override
  Stream<List<ChatRoomDm>> getChatsStream({
    required String userId,
    required ChatSortBy sortBy,
    required bool includeEmptyChats,
    required bool includeUnreadMessagesCount,
    int? limit,
  }) {
    final chatRoomCollection =
        ChatViewFireStoreCollections.userChatsConversationCollection(
      userId: userId,
    );

    return chatRoomCollection.snapshots().switchMap(
      (userChatsSnapshot) {
        final docs = userChatsSnapshot.docs;
        if (docs.isEmpty) return Stream.value([]);
        return _getChatsWithLastMessageStream(
          limit: limit,
          userId: userId,
          sortBy: sortBy,
          userChatsSnapshot: docs,
        ).switchMap(
          (chats) => _getChatsStream(
            chats: chats,
            userId: userId,
            includeEmptyChats: includeEmptyChats,
            includeUnreadMessagesCount: includeUnreadMessagesCount,
          ),
        );
      },
    );
  }

  Stream<Map<String, Message?>> _getChatsWithLastMessageStream({
    required List<QueryDocumentSnapshot<UserChatsConversationDm?>>
        userChatsSnapshot,
    required String userId,
    required ChatSortBy sortBy,
    int? limit,
  }) {
    var chats = <String, Message?>{};
    return CombineLatestStream(
      [
        for (var i = 0; i < userChatsSnapshot.length; i++)
          if (userChatsSnapshot[i].id case final chatId)
            _getLastMessage(chatRoomId: chatId, userId: userId).map(
              (message) => chats[chatId] = message,
            ),
      ],
      (_) {
        if (sortBy.isNewestFirst) {
          chats = Map.fromEntries(
            chats.entries.toList()
              ..sort((e1, e2) => e2.value.compareUpdateAt(e1.value)),
          );
        }
        if (limit != null) {
          chats = Map.fromEntries(chats.entries.take(limit));
        }
        return chats;
      },
    );
  }

  Stream<List<ChatRoomDm>> _getChatsStream({
    required Map<String, Message?> chats,
    required String userId,
    required bool includeEmptyChats,
    required bool includeUnreadMessagesCount,
  }) {
    final chatIds = chats.keys.toList();
    final docsLength = chatIds.length;
    final chatStreams = <Stream<ChatRoomDm?>>[
      for (var i = 0; i < docsLength; i++)
        _chatRoomStream(chatRoomId: chatIds[i], userId: userId).switchMap(
          (chatRoom) {
            if (chatRoom == null) return Stream.value(null);
            if (!includeEmptyChats &&
                chatRoom.chatRoomType.isOneToOne &&
                chatRoom.lastMessage == null) {
              return Stream.value(null);
            }
            return getChatRoomParticipantsStream(
              userId: userId,
              // Added group check as to get timestamp of current user
              // for when they joined the group for count unread messages.
              includeCurrentUser: chatRoom.chatRoomType.isGroup,
              chatId: chatRoom.chatId,
            ).switchMap(
              (users) => _getChatRoomFromChatRoomParticipants(
                users: users,
                userId: userId,
                chatRoom: chatRoom.copyWith(
                  lastMessage: chats[chatRoom.chatId],
                ),
                fetchUnreadMessageCount: includeUnreadMessagesCount,
              ),
            );
          },
        ),
    ];
    return CombineLatestStream(chatStreams, (chats) => chats.toNonEmpty);
  }

  Stream<ChatRoomDm?> _chatRoomStream({
    required String chatRoomId,
    required String userId,
    bool fetchLastMessage = false,
  }) {
    return ChatViewFireStoreCollections.chatCollection()
        .doc(chatRoomId)
        .snapshots()
        .switchMap(
      (snapshot) {
        final chatRoom = snapshot.data();
        return fetchLastMessage
            ? _getLastMessage(chatRoomId: chatRoomId, userId: userId).map(
                (message) => chatRoom?.copyWith(lastMessage: message),
              )
            : Stream.value(chatRoom);
      },
    );
  }

  Stream<Message?> _getLastMessage({
    required String chatRoomId,
    required String userId,
  }) {
    final updateAtMessageCollection =
        _messageCollectionRef(chatRoomId).toMessageQuery(
      sortBy: MessageSortBy.updateAt,
      sortOrder: MessageSortOrder.desc,
      limit: 1,
    );

    return updateAtMessageCollection.snapshots().switchMap(
      (snapshot) {
        final message = snapshot.docs.firstOrNull?.data();
        if (message == null) return Stream.value(null);
        final reactedByUserId = message.update?[_reaction]?.toString() ?? '';
        final showReactionMessage =
            message.sentBy == userId || reactedByUserId == userId;
        return showReactionMessage
            ? Stream.value(message)
            : _messageCollectionRef(chatRoomId)
                .toMessageQuery(
                  sortBy: MessageSortBy.createAt,
                  sortOrder: MessageSortOrder.desc,
                  limit: 1,
                )
                .snapshots()
                .map((snapshot) => snapshot.docs.firstOrNull?.data());
      },
    );
  }

  Stream<ChatRoomDm> _getChatRoomFromChatRoomParticipants({
    required String userId,
    required ChatRoomDm chatRoom,
    required List<ChatRoomUserDm> users,
    required bool fetchUnreadMessageCount,
  }) {
    ChatRoomUserDm? currentUser;
    final List<ChatRoomUserDm> otherUsers;
    if (chatRoom.chatRoomType.isGroup) {
      final result = _getChatRoomParticipant(users: users, userId: userId);
      currentUser = result.currentUser;
      otherUsers = result.otherUsers;
    } else {
      otherUsers = users;
    }

    final membershipTimestamp = currentUser?.membershipStatusTimestamp;

    final unreadMessagesCountStream = fetchUnreadMessageCount
        ? getUnreadMessagesCount(
            userId: userId,
            chatId: chatRoom.chatId,
            startMessageFromDateTime: membershipTimestamp,
          )
        : Stream.value(0);

    final isMessageBeforeMembership =
        membershipTimestamp.isMessageBeforeMembership(
      chatRoom.lastMessage?.createdAt,
    );

    return unreadMessagesCountStream.map(
      (unreadMessagesCount) => chatRoom.copyWith(
        forceNullValue: true,
        users: otherUsers,
        chatId: chatRoom.chatId,
        groupName: chatRoom.groupName,
        chatRoomType: chatRoom.chatRoomType,
        groupPhotoUrl: chatRoom.groupPhotoUrl,
        chatRoomCreateBy: chatRoom.chatRoomCreateBy,
        unreadMessagesCount: unreadMessagesCount,
        lastMessage: isMessageBeforeMembership ? null : chatRoom.lastMessage,
      ),
    );
  }

  @override
  Future<String?> createOneToOneUserChat({
    required String userId,
    required String otherUserId,
    String? chatRoomId,
  }) async {
    if (otherUserId == userId) {
      throw Exception("otherUserId can't be same!");
    }

    final isUsersExists = await Future.wait([
      _isUserExists(userId),
      _isUserExists(otherUserId),
    ]);

    final isBothUserExists = (isUsersExists.firstOrNull ?? false) &&
        (isUsersExists.lastOrNull ?? false);

    if (!isBothUserExists) {
      throw Exception('User ID ($otherUserId) or ($userId) not exists');
    }

    final chatId = await _isChatExists(
      userId: userId,
      otherUserId: otherUserId,
    );
    if (chatId != null) return chatId;

    final newChatId = await _createChatForOneToOne(
      userId: userId,
      otherUserId: otherUserId,
      chatRoomId: chatRoomId,
    );

    if (newChatId?.isEmpty ?? true) throw Exception('Unable to create a chat');

    final result = await Future.wait([
      _createChatInUserChats(
        chatId: newChatId!,
        currentUserId: userId,
        otherUserId: otherUserId,
      ),
      _createChatInUserChats(
        chatId: newChatId,
        currentUserId: otherUserId,
        otherUserId: userId,
      ),
    ]);

    final isCurrentUserChatRoomCreated = result.firstOrNull ?? false;
    final isOtherUserChatRoomCreated = result.lastOrNull ?? false;

    if (isCurrentUserChatRoomCreated && isOtherUserChatRoomCreated) {
      return newChatId;
    } else if (isCurrentUserChatRoomCreated && !isOtherUserChatRoomCreated) {
      await _deleteChatFromUserChats(
        currentUserId: otherUserId,
        chatId: newChatId,
      );
      return null;
    } else if (isOtherUserChatRoomCreated && !isCurrentUserChatRoomCreated) {
      await _deleteChatFromUserChats(
        currentUserId: userId,
        chatId: newChatId,
      );
      return null;
    } else {
      return null;
    }
  }

  @override
  Future<String?> createGroupChat({
    required String userId,
    required String groupName,
    required Map<String, Role> participants,
    String? groupProfilePic,
    String? chatRoomId,
  }) async {
    if (participants.isEmpty) throw Exception("User IDs can't be empty!");

    final ids = participants.keys.toList();

    if (ids.contains(userId)) {
      throw Exception("userIds can't contains current user ID!");
    }

    final userIdsLength = ids.length;

    final isUsersExistsUserInCollection = await Future.wait([
      _isUserExists(userId),
      for (var i = 0; i < userIdsLength; i++) _isUserExists(ids[i]),
    ]);

    final isAllUserExistsInUserCollection = isUsersExistsUserInCollection.fold(
      true,
      (value, isUserExist) => value && isUserExist,
    );

    if (!isAllUserExistsInUserCollection) {
      throw Exception(
        'Some of User IDs($participants) or ($userId) not exists',
      );
    }

    final chatId = chatRoomId ?? const Uuid().v8();

    final isChatCreated = await _createChat(
      chatId: chatId,
      chatRoom: ChatRoomDm(
        chatId: chatId,
        groupName: groupName,
        groupPhotoUrl: groupProfilePic,
        chatRoomCreateBy: userId,
        chatRoomType: ChatRoomType.group,
      ),
    );

    if (!isChatCreated) return null;

    final isUsersAddedInChatRoom = await Future.wait(
      [
        _addUserInChat(
          chatId: chatId,
          chatRoomUser: ChatRoomUserDm(
            role: Role.admin,
            chatUser: null,
            userId: userId,
            membershipStatusTimestamp: null,
            membershipStatus: MembershipStatus.member,
          ),
        ),
        for (var i = 0; i < userIdsLength; i++)
          if (ids[i] case final userId)
            _addUserInChat(
              chatId: chatId,
              chatRoomUser: ChatRoomUserDm(
                role: participants[userId] ?? Role.admin,
                chatUser: null,
                userId: userId,
                membershipStatusTimestamp: null,
                membershipStatus: MembershipStatus.member,
              ),
            ),
      ],
    );

    final isAllUsersAddedInChatRoom = isUsersAddedInChatRoom.fold(
      true,
      (value, isAdded) => value && isAdded,
    );

    if (!isAllUsersAddedInChatRoom) {
      await deleteChat(chatId: chatId);
      throw Exception('Operation Failed! Unable to add all users in chat room');
    }

    final isChatAddedInAllUsers = await Future.wait([
      _createChatInUserChats(
        chatId: chatId,
        currentUserId: userId,
        otherUserId: null,
      ),
      for (var i = 0; i < userIdsLength; i++)
        _createChatInUserChats(
          chatId: chatId,
          otherUserId: null,
          currentUserId: ids[i],
        ),
    ]);

    final isAllChatAddedInAllUsers = isChatAddedInAllUsers.fold(
      true,
      (value, isAdded) => value && isAdded,
    );

    if (!isAllChatAddedInAllUsers) {
      await deleteChat(chatId: chatId);
      throw Exception("Operation Failed! Unable to add chat in user's chats");
    }

    return chatId;
  }

  @override
  Future<bool> updateGroupChat({
    required String chatId,
    String? groupName,
    String? groupProfilePic,
  }) async {
    final data = <String, dynamic>{
      if (groupName?.isNotEmpty ?? false) _groupName: groupName,
      if (groupProfilePic != null) _groupPhotoUrl: groupProfilePic,
    };

    if (data.isEmpty) return true;

    try {
      await updateChatRoom(chatId: chatId, data: data);
      return true;
    } catch (_) {
      return false;
    }
  }

  /// To create one to one chat document at path of 'user_chats/[currentUserId]/chats/[chatId]' .
  Future<bool> _createChatInUserChats({
    required String chatId,
    required String currentUserId,
    required String? otherUserId,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: currentUserId,
      ).doc(chatId).set(UserChatsConversationDm(userId: otherUserId));
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<bool> _deleteChatFromUserChats({
    required String chatId,
    required String currentUserId,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: currentUserId,
      ).doc(chatId).delete();
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<String?> _createChatForOneToOne({
    required String userId,
    required String otherUserId,
    String? chatRoomId,
  }) async {
    final chatId = chatRoomId ?? const Uuid().v8();

    final isChatCreated = await _createChat(
      chatId: chatId,
      chatRoom: ChatRoomDm(
        chatId: chatId,
        chatRoomType: ChatRoomType.oneToOne,
      ),
    );

    if (!isChatCreated) return null;

    final result = await Future.wait(
      [
        _addUserInChat(
          chatId: chatId,
          chatRoomUser: ChatRoomUserDm(
            role: Role.admin,
            chatUser: null,
            userId: userId,
            membershipStatus: null,
            membershipStatusTimestamp: null,
          ),
        ),
        _addUserInChat(
          chatId: chatId,
          chatRoomUser: ChatRoomUserDm(
            role: Role.admin,
            chatUser: null,
            userId: otherUserId,
            membershipStatus: null,
            membershipStatusTimestamp: null,
          ),
        ),
      ],
    );

    final isCurrentUserCreated = result.firstOrNull ?? false;
    final isOtherUserCreated = result.lastOrNull ?? false;

    if (!isCurrentUserCreated && !isOtherUserCreated) {
      return null;
    } else if (isCurrentUserCreated && !isOtherUserCreated) {
      await deleteChat(chatId: chatId);
      return null;
    } else if (isOtherUserCreated && !isCurrentUserCreated) {
      await deleteChat(chatId: chatId);
      return null;
    } else {
      return chatId;
    }
  }

  Future<bool> _addUserInChat({
    required ChatRoomUserDm chatRoomUser,
    required String chatId,
  }) async {
    try {
      await ChatViewFireStoreCollections.chatUsersCollection(
        _chatRoomCollectionPath(chatId),
      ).doc(chatRoomUser.userId).set(chatRoomUser);
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<bool> _createChat({
    required String chatId,
    required ChatRoomDm chatRoom,
  }) async {
    try {
      await ChatViewFireStoreCollections.chatCollection()
          .doc(chatId)
          .set(chatRoom);
      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<String?> isOneToOneChatExists({
    required String userId,
    required String otherUserId,
  }) async {
    try {
      final isOtherUserExist = await _isUserExists(otherUserId);
      if (!isOtherUserExist) {
        throw Exception('User ID($otherUserId) not exists');
      }
      return _isChatExists(otherUserId: otherUserId, userId: userId);
    } catch (_) {
      return null;
    }
  }

  Future<String?> _isChatExists({
    required String userId,
    required String otherUserId,
  }) async {
    final chatsSnapshot =
        await ChatViewFireStoreCollections.userChatsConversationCollection(
      userId: userId,
    ).get();

    final docs = chatsSnapshot.docs;
    final docsLength = docs.length;
    for (var i = 0; i < docsLength; i++) {
      final doc = docs[i];
      final chatUserId = doc.data()?.userId;
      if (chatUserId == otherUserId) return doc.id;
    }
    return null;
  }

  Future<bool> _isUserExists(String userId) async {
    final result = await _usersCollectionRef().doc(userId).get();
    return result.exists;
  }

  @override
  Future<bool> deleteChat({
    required String chatId,
    DeleteChatMediaFromStorageCallback? deleteMediaFromStorage,
  }) async {
    final chatRoomCollectionPath = _chatRoomCollectionPath(chatId);

    final userCollection = ChatViewFireStoreCollections.chatUsersCollection(
      chatRoomCollectionPath,
    );

    final usersSnapshot = await userCollection.get();
    final usersSnapshotDocs = usersSnapshot.docs;
    final usersSnapshotDocsLength = usersSnapshotDocs.length;

    // List of asynchronous tasks for removing the chat room from each user's
    // chat list.
    final deletingChatRoomFromUsers = <Future<void>>[];

    // List of asynchronous tasks for removing users from the chat room.
    final deletingUsersFromChatRoom = <Future<void>>[];

    for (var i = 0; i < usersSnapshotDocsLength; i++) {
      final userId = usersSnapshotDocs[i].id;
      deletingChatRoomFromUsers.add(
        ChatViewFireStoreCollections.userChatsConversationCollection(
          userId: userId,
        ).doc(chatId).delete(),
      );
      deletingUsersFromChatRoom.add(
        ChatViewFireStoreCollections.chatUsersCollection(chatRoomCollectionPath)
            .doc(userId)
            .delete(),
      );
    }

    // Removes the chat room from each user's chat list
    // and users from the chat room.
    await Future.wait([
      ...deletingChatRoomFromUsers,
      ...deletingUsersFromChatRoom,
    ]);

    await _deleteNestedChatCollections(chatId);

    /// for deleting chat medias
    await deleteMediaFromStorage?.call(chatId);
    return true;
  }

  Future<bool> _deleteNestedChatCollections(String chatId) async {
    try {
      final chatRoomCollection = _messageCollectionRef(chatId);

      final messagesSnapshot = await chatRoomCollection.get();

      final messagesSnapshotDocs = messagesSnapshot.docs;
      final messagesSnapshotDocsLength = messagesSnapshotDocs.length;

      await Future.wait([
        for (var i = 0; i < messagesSnapshotDocsLength; i++)
          chatRoomCollection.doc(messagesSnapshotDocs[i].id).delete(),
      ]);

      await ChatViewFireStoreCollections.chatCollection().doc(chatId).delete();

      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<bool> addUserInGroup({
    required String chatId,
    required String userId,
    required Role role,
    required bool includeAllChatHistory,
  }) async {
    final isUserExist = await _isUserExists(userId);
    if (!isUserExist) throw Exception('User ID ($userId) not exists');

    final chatRoom = await _isChatRoomExists(chatId);
    if (chatRoom == null) {
      throw Exception('Chat Room ($chatId) not exists');
    } else if (chatRoom.chatRoomType.isOneToOne) {
      throw Exception("User can't be added in one to one chat");
    }

    try {
      final userChatRoomCollection =
          ChatViewFireStoreCollections.chatUsersCollection(
        _chatRoomCollectionPath(chatId),
      );

      final userChatRoomData = await userChatRoomCollection.doc(userId).get();

      final userChatRoom = userChatRoomData.data();

      final memberStatus = userChatRoom?.membershipStatus;

      if (userChatRoom == null || memberStatus == null) {
        await userChatRoomCollection.doc(userId).set(
              ChatRoomUserDm(
                role: role,
                chatUser: null,
                userId: userId,
                membershipStatus: MembershipStatus.member,
                membershipStatusTimestamp:
                    includeAllChatHistory ? null : DateTime.now(),
              ),
            );
      } else if (!memberStatus.isMember) {
        final chatRoomUser = userChatRoom.copyWith(
          membershipStatus: MembershipStatus.member,
          membershipStatusTimestamp:
              includeAllChatHistory ? null : DateTime.now(),
          forceNullValue: true,
        );
        await updateChatRoomUserMetadata(
          userId: userId,
          chatId: chatId,
          chatRoomUserData: chatRoomUser.toJson(),
        );
      } else {
        return true;
      }

      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: userId,
      ).doc(chatId).set(const UserChatsConversationDm());

      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<bool> removeUserFromGroup({
    required String chatId,
    required String userId,
    required String removeUserId,
    required bool deleteGroupIfSingleUser,
    required DeleteChatMediaFromStorageCallback deleteChatDocsFromStorage,
  }) async {
    final membershipStatus = userId == removeUserId
        ? MembershipStatus.left
        : MembershipStatus.removed;

    if (membershipStatus.isMember) throw Exception('In appropriate operation');

    final isUserExist = await _isUserExists(removeUserId);
    if (!isUserExist) throw Exception('User ID ($removeUserId) not exists');

    final chatRoom = await _isChatRoomExists(chatId);
    if (chatRoom == null) throw Exception('Chat Room ($chatId) not exists');

    if (chatRoom.chatRoomType.isOneToOne) {
      throw Exception("User can't be removed from the one to one chat");
    }

    try {
      final userChatRoomCollection =
          ChatViewFireStoreCollections.chatUsersCollection(
        _chatRoomCollectionPath(chatId),
      );

      ChatRoomUserDm? currentChatRoomUser;

      if (deleteGroupIfSingleUser) {
        final userChatRoomCollectionData = await userChatRoomCollection.get();

        final docs = userChatRoomCollectionData.docs;
        final docsLength = docs.length;

        var activeMembers = 0;

        for (var i = 0; i < docsLength; i++) {
          final chatRoomUser = docs[i].data();
          if (chatRoomUser == null) continue;
          if (chatRoomUser.userId == removeUserId) {
            currentChatRoomUser = chatRoomUser;
          }
          if (chatRoomUser.membershipStatus?.isMember ?? false) activeMembers++;
        }

        if (activeMembers == 1) {
          final result = await deleteChat(
            chatId: chatId,
            deleteMediaFromStorage: deleteChatDocsFromStorage,
          );
          return result;
        }
      } else {
        final userChatRoomData =
            await userChatRoomCollection.doc(removeUserId).get();
        currentChatRoomUser = userChatRoomData.data();
      }

      if (currentChatRoomUser != null &&
          currentChatRoomUser.membershipStatus != membershipStatus) {
        await updateChatRoomUserMetadata(
          userId: removeUserId,
          chatId: chatId,
          membershipStatus: membershipStatus,
        );
      }

      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: removeUserId,
      ).doc(chatId).delete();

      return true;
    } catch (_) {
      return false;
    }
  }

  Future<ChatRoomDm?> _isChatRoomExists(String chatRoomId) async {
    final result = await ChatViewFireStoreCollections.chatCollection()
        .doc(chatRoomId)
        .get();
    return result.data();
  }

  @override
  Stream<ChatRoomMetadata> getGroupChatMetadataStream(String chatId) {
    return ChatViewFireStoreCollections.chatCollection()
        .doc(chatId)
        .snapshots()
        .distinct(
      (previous, next) {
        final previousData = previous.data();
        final nextData = next.data();
        return previousData?.groupName == nextData?.groupName &&
            previousData?.groupPhotoUrl == nextData?.groupPhotoUrl;
      },
    ).map(
      (chatRoomSnapshot) {
        final chatRoom = chatRoomSnapshot.data();
        if (chatRoom == null || !chatRoom.chatRoomType.isGroup) {
          throw Exception('No Group Chat Found');
        }
        return ChatRoomMetadata(
          chatName: chatRoom.groupName ?? 'Unknown Group',
          chatProfilePhoto: chatRoom.groupPhotoUrl,
        );
      },
    );
  }

  @override
  Future<DateTime?> userAddedInGroupChatTimestamp({
    required String chatId,
    required String userId,
  }) async {
    final chatRoomUserData =
        await ChatViewFireStoreCollections.chatUsersCollection(
      _chatRoomCollectionPath(chatId),
    ).doc(userId).get();

    final chatRoomUser = chatRoomUserData.data();

    return switch (chatRoomUser?.membershipStatus) {
      MembershipStatus.member => chatRoomUser?.membershipStatusTimestamp,
      null || MembershipStatus.removed || MembershipStatus.left => null,
    };
  }

  @override
  Future<bool> updateChatRoom({
    required String chatId,
    Message? lastMessage,
    Map<String, dynamic>? data,
  }) async {
    try {
      await ChatViewFireStoreCollections.chatCollection()
          .doc(chatId)
          .update(data ?? {_lastMessage: lastMessage?.toJson()});
      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<bool> fetchAndUpdateLastMessage({required String chatId}) async {
    try {
      final messageCollectionRef = _messageCollectionRef(chatId)
          .orderBy(
            MessageSortBy.createAt.key,
            descending: MessageSortOrder.desc.isDesc,
          )
          .limit(1);

      final result = await messageCollectionRef.get();
      final lastMessage = result.docs.lastOrNull?.data();

      return updateChatRoom(chatId: chatId, lastMessage: lastMessage);
    } catch (_) {
      return false;
    }
  }

  @override
  Stream<ChatRoomMetadata> getChatRoomMetadataStream({
    required ChatRoomType chatRoomType,
    required String chatId,
    String? userId,
  }) {
    assert(
      chatRoomType.isGroup || chatRoomType.isOneToOne && userId != null,
      "User Id can't be null",
    );
    return switch (chatRoomType) {
      ChatRoomType.oneToOne when userId != null =>
        getUserStreamById(userId: userId).map(
          (user) => ChatRoomMetadata(
            chatName: user?.name ?? 'Unknown User',
            chatProfilePhoto: user?.profilePhoto,
          ),
        ),
      ChatRoomType.group => getGroupChatMetadataStream(chatId),
      _ => Stream.value(
          const ChatRoomMetadata(chatName: 'Unknown User'),
        ),
    };
  }

  ChatRoomParticipantsRecord _getChatRoomParticipant({
    required String userId,
    required List<ChatRoomUserDm> users,
  }) {
    final usersLength = users.length;

    ChatRoomUserDm? currentUser;
    final otherUsers = <ChatRoomUserDm>[];

    for (var i = 0; i < usersLength; i++) {
      final user = users[i];
      if (user.userId == userId) {
        currentUser = user;
      } else {
        otherUsers.add(user);
      }
    }

    return (currentUser: currentUser, otherUsers: otherUsers);
  }

  Stream<UserInfoWithStatusRecord> _getUserInfoWithStatusStream(String userId) {
    return Rx.combineLatest2(
      getUserStreamById(userId: userId),
      ChatViewFireStoreCollections.userChatCollection().doc(userId).snapshots(),
      (userInfo, userStatusSnapshot) => (
        user: userInfo,
        userActiveStatus: userStatusSnapshot.data()?.userActiveStatus,
      ),
    );
  }
}
