import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_chatview_models/flutter_chatview_models.dart';
import 'package:rxdart/rxdart.dart';
import 'package:uuid/uuid.dart';

import '../../chatview_db_connection.dart';
import '../../enum.dart';
import '../../extensions.dart';
import '../../models/chat_room_dm.dart';
import '../../models/chat_room_user_dm.dart';
import '../../models/chat_view_participants_dm.dart';
import '../../models/config/add_message_config.dart';
import '../../models/config/chat_database_path_config.dart';
import '../../models/config/chat_view_firestore_path_config.dart';
import '../../models/message_dm.dart';
import '../../models/user_chats_conversation_dm.dart';
import '../../typedefs.dart';
import '../database_service.dart';
import 'chatview_firestore_collections.dart';

/// provides methods for getting, adding, updating and deleting message
/// and messages streams from Firebase Firestore.
final class ChatViewFireStoreDatabase implements DatabaseService {
  static const String _typingStatus = 'typing_status';
  static const String _userStatus = 'user_status';
  static const String _status = 'status';
  static const String _reaction = 'reaction';
  static const String _lastMessage = 'last_message';
  static const String _groupName = 'group_name';
  static const String _groupPhotoUrl = 'group_photo_url';

  static String? _chatRoomId;

  ChatDatabasePathConfig get _chatDatabaseConfig =>
      ChatViewDbConnection.instance.getChatDatabasePathConfig;

  String? get _userCollection => _chatDatabaseConfig.userCollectionPath;

  ChatViewFireStoreCollectionNameConfig get _firestorePathConfig =>
      ChatViewDbConnection.instance.getChatViewFireStorePathConfig;

  String _chatRoomCollectionPath({String? chatId}) {
    final newChatId = chatId ?? _chatRoomId;
    final collectionPath = '${_firestorePathConfig.chats}/$newChatId';
    assert(
      collectionPath.isValidFirestoreDocument,
      'invalid Firestore document path provided',
    );
    return collectionPath;
  }

  CollectionReference<Message?> _messageCollectionRef({String? chatId}) =>
      ChatViewFireStoreCollections.messageCollection(
        _chatRoomCollectionPath(chatId: chatId),
      );

  @override
  String? get chatRoomId => _chatRoomId;

  @override
  void setChatRoom({required String chatRoomId}) => _chatRoomId = chatRoomId;

  @override
  void resetChatRoom() => _chatRoomId = null;

  @override
  Future<Message?> addMessage(
    Message message, {
    required bool useAutoGeneratedId,
    required AddMessageConfig addMessageConfig,
  }) async {
    if (_chatRoomId == null) throw Exception("Chat Room ID can't be null");

    final url = await addMessageConfig.uploadDocumentFromMessage(message);
    final messageCollectionRef = _messageCollectionRef();
    final newMessage = message.copyWith(message: url);

    Message? updatedMessage;

    if (useAutoGeneratedId) {
      final result = await messageCollectionRef.add(newMessage);
      updatedMessage = newMessage.copyWith(id: result.id);
    } else {
      await messageCollectionRef.doc(newMessage.id).set(newMessage);
      updatedMessage = newMessage;
    }

    // TODO(Yash): Switch to reading last message from message collection
    //  instead of updating last message in chat room document.
    await updateChatRoom(lastMessage: updatedMessage);

    return updatedMessage;
  }

  @override
  Stream<List<MessageDm>> getMessagesStream({
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
    DocumentSnapshot<Message?>? startAfterDocument,
  }) {
    final messageCollectionRef = _messageCollectionRef().toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
      startAfterDocument: startAfterDocument,
    );

    return messageCollectionRef.snapshots().distinct().map(
      (docSnapshot) {
        final messages = docSnapshot.docs;
        final messagesLength = messages.length;
        return [
          for (var i = 0; i < messagesLength; i++)
            if (messages[i].data() case final message?)
              MessageDm(
                message: message.copyWith(id: messages[i].id),
                snapshot: messages[i],
              ),
        ];
      },
    );
  }

  @override
  Stream<Map<Message, DocumentType>> getMessagesStreamWithOperationType({
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
  }) {
    final messageCollectionRef = _messageCollectionRef().toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
    );

    return messageCollectionRef.snapshots().distinct().map(
      (docSnapshot) {
        final messagesChanges = docSnapshot.docChanges;
        final messagesChangesLength = messagesChanges.length;
        final messages = <Message, DocumentType>{};
        for (var i = 0; i < messagesChangesLength; i++) {
          final changedDoc = messagesChanges[i];
          final messageDoc = changedDoc.doc;
          final message = messageDoc.data()?.copyWith(id: messageDoc.id);
          if (message == null) continue;
          messages[message] = changedDoc.type.toDocumentType();
        }
        return messages;
      },
    );
  }

  @override
  Future<List<MessageDm>> getMessages({
    required MessageSortBy sortBy,
    required MessageSortOrder sortOrder,
    int? limit,
    DocumentSnapshot<Message?>? startAfterDocument,
  }) async {
    final messageCollectionRef = _messageCollectionRef().toMessageQuery(
      sortBy: sortBy,
      sortOrder: sortOrder,
      limit: limit,
      startAfterDocument: startAfterDocument,
    );

    final result = await messageCollectionRef.get();
    final docs = result.docs;
    final docsLength = docs.length;
    return [
      for (var i = 0; i < docsLength; i++)
        if (docs[i].data() case final message?)
          MessageDm(
            message: message.copyWith(id: docs[i].id),
            snapshot: docs[i],
          ),
    ];
  }

  @override
  Future<bool> deleteMessage(
    Message message, {
    required DeleteDocumentCallback onDeleteDocument,
    required bool deleteImageFromStorage,
    required bool deleteVoiceFromStorage,
  }) async {
    final messageType = message.messageType;
    if (messageType.isImage && deleteImageFromStorage) {
      await onDeleteDocument(message);
    } else if (messageType.isVoice && deleteVoiceFromStorage) {
      await onDeleteDocument(message);
    }
    await _messageCollectionRef().doc(message.id).delete();
    return true;
  }

  @override
  Future<void> updateMessage(
    Message message, {
    MessageStatus? messageStatus,
    UserReactionCallback? userReaction,
  }) async {
    final data = <String, dynamic>{
      if (messageStatus case final status?) _status: status.name,
      if (userReaction != null) _reaction: message.reaction.toJson(),
    };

    if (data.isEmpty) return;

    await _messageCollectionRef().doc(message.id).update(data);

    await updateChatRoom(lastMessage: message.copyWith(status: messageStatus));
  }

  @override
  Stream<List<ChatRoomUserDm>> getChatRoomParticipantsStream({
    bool includeCurrentUser = true,
    int? limit,
    String? chatId,
  }) {
    final collectionPath = _chatRoomCollectionPath(chatId: chatId);

    final currentChatID = collectionPath.chatId ?? '';

    if (currentChatID.isEmpty) {
      return Stream.error('Chat ID not found from path: $collectionPath');
    }

    final userCollection =
        ChatViewFireStoreCollections.chatUsersCollection(collectionPath)
            .toQuery(limit: limit);

    return userCollection.snapshots().switchMap(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        if (docs.isEmpty) {
          return Stream.error('No users found in chat ID: $chatId');
        }
        final docsLength = docs.length;
        final listOfChatUserStream = <Stream<ChatRoomUserDm>>[];
        final currentUserId = ChatViewDbConnection.instance.currentUserId;
        for (var i = 0; i < docsLength; i++) {
          final doc = docs[i];
          final userId = doc.id;
          if (!includeCurrentUser && userId == currentUserId) {
            continue;
          }
          final chatRoomUser = doc.data();
          if (chatRoomUser == null) continue;
          listOfChatUserStream.add(
            getUserStreamById(userId: userId).map(
              (chatUser) => chatRoomUser.copyWith(chatUser: chatUser),
            ),
          );
        }
        return listOfChatUserStream.isEmpty
            ? Stream.value([])
            : Rx.combineLatestList(listOfChatUserStream);
      },
    );
  }

  @override
  Stream<List<ChatUser>> getUsersStream({int? limit}) {
    final userCollection =
        ChatViewFireStoreCollections.usersCollection().toQuery(limit: limit);

    return userCollection.snapshots().map(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        final docsLength = docs.length;
        return <ChatUser>[
          for (var i = 0; i < docsLength; i++)
            if (docs[i].data() case final chatUser?) chatUser,
        ];
      },
    );
  }

  @override
  Future<List<ChatUser>> getUsers({int? limit}) async {
    final userCollection =
        ChatViewFireStoreCollections.usersCollection().toQuery(limit: limit);
    final userSnapshot = await userCollection.get();
    final docs = userSnapshot.docs;
    final docsLength = docs.length;
    return <ChatUser>[
      for (var i = 0; i < docsLength; i++)
        if (docs[i].data() case final chatUser?) chatUser,
    ];
  }

  @override
  Stream<ChatUser?> getUserStreamById({required String userId}) {
    final userCollection =
        ChatViewFireStoreCollections.usersCollection(_userCollection)
            .doc(userId);
    return userCollection.snapshots().map((chatUserDoc) => chatUserDoc.data());
  }

  @override
  Future<ChatViewParticipantsDm?> getChatRoomParticipants() async {
    if (chatRoomId?.isEmpty ?? true) return null;

    final chatRoomResult = await ChatViewFireStoreCollections.chatCollection()
        .doc(chatRoomId)
        .get();

    final chatRoom = chatRoomResult.data();

    if (chatRoom == null) return null;

    final results = await _getChatRoomUsersWithDetails();
    final resultsLength = results.length;

    ChatUser? currentUser;
    final otherUsers = <ChatUser>[];

    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    for (var i = 0; i < resultsLength; i++) {
      final user = results[i].chatUser;
      if (user == null) continue;
      if (user.id == currentUserId) {
        currentUser = user;
      } else {
        otherUsers.add(user);
      }
    }

    if (currentUser == null || otherUsers.isEmpty) return null;

    return ChatViewParticipantsDm(
      chatRoomType: chatRoom.chatRoomType,
      groupName: chatRoom.groupName,
      groupPhotoUrl: chatRoom.groupPhotoUrl,
      currentUser: currentUser,
      otherUsers: otherUsers,
    );
  }

  @override
  Future<void> updateChatRoomUserMetadata({
    TypeWriterStatus? typingStatus,
    UserStatus? userStatus,
  }) async {
    final userId = ChatViewDbConnection.instance.currentUserId;
    if (userId == null) throw Exception("Sender ID Can't be null");

    final data = <String, dynamic>{
      if (typingStatus case final status?) _typingStatus: status.name,
      if (userStatus case final status?) _userStatus: status.name,
    };

    if (data.isEmpty) return;

    return ChatViewFireStoreCollections.chatUsersCollection(
      _chatRoomCollectionPath(),
    ).doc(userId).update(data);
  }

  @override
  Stream<Map<String, ChatRoomUserDm>> getChatRoomUsersMetadataStream({
    required bool observeUserInfoChanges,
    int? limit,
  }) {
    final userCollection = ChatViewFireStoreCollections.chatUsersCollection(
      _chatRoomCollectionPath(),
    ).toQuery(limit: limit);

    return userCollection.snapshots().switchMap(
      (userSnapshot) {
        final docs = userSnapshot.docs;
        final docsLength = docs.length;
        final users = <String, ChatRoomUserDm>{};
        final currentUserId = ChatViewDbConnection.instance.currentUserId;
        for (var i = 0; i < docsLength; i++) {
          final chatRoomUser = docs[i].data();
          if (chatRoomUser == null) continue;
          final userId = chatRoomUser.userId;
          if (userId == currentUserId) continue;
          users[userId] = chatRoomUser;
        }
        if (!observeUserInfoChanges) return Stream.value(users);

        final newUsers = users.values.toList();
        final usersLength = newUsers.length;
        final chatRoomUserStreamWithInfo = <Stream<ChatRoomUserDm>>[
          for (var i = 0; i < usersLength; i++)
            if (newUsers[i] case final chatRoomUser)
              getUserStreamById(userId: chatRoomUser.userId).map(
                (chatUser) {
                  final user = chatRoomUser.copyWith(chatUser: chatUser);
                  users[chatRoomUser.userId] = user;
                  return user;
                },
              ),
        ];

        return Rx.combineLatest(chatRoomUserStreamWithInfo, (_) => users);
      },
    );
  }

  Future<List<ChatRoomUserDm>> _getChatRoomUsersWithDetails({
    bool includeCurrentUser = true,
  }) async {
    final collectionPath = _chatRoomCollectionPath();

    final currentChatID = collectionPath.chatId ?? '';

    if (currentChatID.isEmpty) {
      return throw Exception('Chat ID not found from path: $collectionPath');
    }

    final userCollectionSnapshot =
        await ChatViewFireStoreCollections.chatUsersCollection(collectionPath)
            .get();

    final docs = userCollectionSnapshot.docs;
    if (docs.isEmpty) {
      throw Exception('No users found in chat ID: $currentChatID');
    }

    final docsLength = docs.length;
    final chatRoomUsers = <String, ChatRoomUserDm>{};
    final chatRoomUsersInfoFutures = <Future<void>>[];
    final currentUserId = ChatViewDbConnection.instance.currentUserId;

    for (var i = 0; i < docsLength; i++) {
      final doc = docs[i];
      final userId = doc.id;
      if (!includeCurrentUser && userId == currentUserId) {
        continue;
      }
      final chatRoomUser = doc.data();
      if (chatRoomUser == null) continue;
      chatRoomUsers[userId] = chatRoomUser;
      chatRoomUsersInfoFutures.add(
        ChatViewFireStoreCollections.usersCollection(_userCollection)
            .doc(userId)
            .get()
            .then(
          (chatUserDoc) {
            final userData = chatUserDoc.data() ??
                ChatUser(id: userId, name: 'Unknown User');
            final chatRoomUser = chatRoomUsers[userId];
            if (chatRoomUser != null) {
              chatRoomUsers[userId] = chatRoomUser.copyWith(chatUser: userData);
            }
          },
        ),
      );
    }

    await Future.wait(chatRoomUsersInfoFutures);
    return chatRoomUsers.values.toList();
  }

  @override
  Stream<int> getUnreadMessagesCount(String chatId) {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    return ChatViewFireStoreCollections.messageCollection(
      _chatRoomCollectionPath(chatId: chatId),
    ).snapshots().map(
      (messageSnapshot) {
        final docs = messageSnapshot.docs;
        final docsLength = docs.length;
        var count = 0;
        for (var i = 0; i < docsLength; i++) {
          final message = docs[i].data();
          if (message == null ||
              message.sentBy == currentUserId ||
              message.status.isRead) {
            continue;
          }
          count++;
        }
        return count;
      },
    );
  }

  @override
  Stream<List<ChatRoomDm>> getChats({
    required ChatSortBy sortBy,
    required bool showEmptyMessagesChats,
    required bool fetchUnreadMessageCount,
    int? limit,
  }) {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    if (currentUserId == null) {
      return Stream.error('Current User with ID $currentUserId not found!');
    }

    final chatRoomCollection =
        ChatViewFireStoreCollections.userChatsConversationCollection(
      userId: currentUserId,
    ).toQuery(limit: limit);

    return chatRoomCollection.snapshots().switchMap(
      (userChatsSnapshot) {
        final docs = userChatsSnapshot.docs;
        if (docs.isEmpty) return Stream.value([]);
        final docsLength = docs.length;
        final chatStreams = <Stream<ChatRoomDm?>>[
          for (var i = 0; i < docsLength; i++)
            ChatViewFireStoreCollections.chatCollection()
                .doc(docs[i].id)
                .snapshots()
                .switchMap(
              (chatRoomSnapshot) {
                final chatRoom = chatRoomSnapshot.data();
                if (chatRoom == null) return Stream.value(null);
                if (!showEmptyMessagesChats &&
                    chatRoom.chatRoomType.isOneToOne &&
                    chatRoom.lastMessage == null) {
                  return Stream.value(null);
                }
                final chatId = chatRoomSnapshot.id;
                return Rx.combineLatest2(
                  getChatRoomParticipantsStream(
                    includeCurrentUser: false,
                    chatId: chatId,
                  ),
                  fetchUnreadMessageCount
                      ? getUnreadMessagesCount(chatId)
                      : Stream.value(0),
                  (chatRoomUsers, unreadMessagesCount) => chatRoom.copyWith(
                    users: chatRoomUsers,
                    unreadMessagesCount: unreadMessagesCount,
                  ),
                );
              },
            ),
        ];
        return CombineLatestStream(
          chatStreams,
          (chats) {
            final chatsLength = chats.length;
            final nonEmptyChats = [
              for (var i = 0; i < chatsLength; i++)
                if (chats[i] case final chat?) chat,
            ];
            if (sortBy.isNewestFirst) {
              nonEmptyChats.sort(
                (a, b) =>
                    b.lastMessage?.createdAt
                        .compareTimestamp(a.lastMessage?.createdAt) ??
                    0,
              );
            }
            return nonEmptyChats;
          },
        );
      },
    );
  }

  @override
  Future<String?> createOneToOneUserChat(String otherUserId) async {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    if (currentUserId == null) {
      throw Exception("Current user ID can't be null!");
    }

    if (otherUserId == currentUserId) {
      throw Exception("otherUserId can't be same!");
    }

    final isUsersExists = await Future.wait([
      _isUserExists(currentUserId),
      _isUserExists(otherUserId),
    ]);

    final isBothUserExists = (isUsersExists.firstOrNull ?? false) &&
        (isUsersExists.lastOrNull ?? false);

    if (!isBothUserExists) {
      throw Exception('User ID ($otherUserId) or ($currentUserId) not exists');
    }

    final chatId = await _isChatExists(otherUserId);
    if (chatId != null) return chatId;

    final newChatId = await _createChatForOneToOne(otherUserId);
    if (newChatId?.isEmpty ?? true) throw Exception('Unable to create a chat');

    final result = await Future.wait([
      _createChatInUserChats(
        chatId: newChatId!,
        currentUserId: currentUserId,
        otherUserId: otherUserId,
      ),
      _createChatInUserChats(
        chatId: newChatId,
        currentUserId: otherUserId,
        otherUserId: currentUserId,
      ),
    ]);

    final isCurrentUserChatRoomCreated = result.firstOrNull ?? false;
    final isOtherUserChatRoomCreated = result.lastOrNull ?? false;

    if (isCurrentUserChatRoomCreated && isOtherUserChatRoomCreated) {
      return newChatId;
    } else if (isCurrentUserChatRoomCreated && !isOtherUserChatRoomCreated) {
      await _deleteChatFromUserChats(
        currentUserId: otherUserId,
        chatId: newChatId,
      );
      return null;
    } else if (isOtherUserChatRoomCreated && !isCurrentUserChatRoomCreated) {
      await _deleteChatFromUserChats(
        currentUserId: currentUserId,
        chatId: newChatId,
      );
      return null;
    } else {
      return null;
    }
  }

  @override
  Future<String?> createGroupChat({
    required String groupName,
    required List<String> userIds,
    String? groupProfilePic,
  }) async {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    if (currentUserId == null) {
      throw Exception("Current user ID can't be null!");
    }

    if (userIds.contains(currentUserId)) {
      throw Exception("userIds can't contains current user ID!");
    }

    final userIdsLength = userIds.length;

    final isUsersExistsUserInCollection = await Future.wait([
      _isUserExists(currentUserId),
      for (var i = 0; i < userIdsLength; i++) _isUserExists(userIds[i]),
    ]);

    final isAllUserExistsInUserCollection = isUsersExistsUserInCollection.fold(
      false,
      (value, isUserExist) => value && isUserExist,
    );

    if (!isAllUserExistsInUserCollection) {
      throw Exception(
        'Some of User IDs($userIds) or ($currentUserId) not exists',
      );
    }

    final chatId = const Uuid().v8();

    final isChatCreated = await _createChat(
      chatId: chatId,
      chatRoom: ChatRoomDm(
        chatId: chatId,
        groupName: groupName,
        groupPhotoUrl: groupProfilePic,
        chatRoomCreateBy: currentUserId,
        chatRoomType: ChatRoomType.group,
      ),
    );

    if (!isChatCreated) return null;

    final isUsersAddedInChatRoom = await Future.wait(
      [
        _addUserInChat(chatId: chatId, userId: currentUserId),
        for (var i = 0; i < userIdsLength; i++)
          _addUserInChat(chatId: chatId, userId: userIds[i]),
      ],
    );

    final isAllUsersAddedInChatRoom = isUsersAddedInChatRoom.fold(
      false,
      (value, isAdded) => value && isAdded,
    );

    if (!isAllUsersAddedInChatRoom) {
      await deleteChat(chatId: chatId);
      throw Exception('Operation Failed! Unable to add all users in chat room');
    }

    final isChatAddedInAllUsers = await Future.wait([
      _createChatInUserChats(
        chatId: chatId,
        currentUserId: currentUserId,
        otherUserId: null,
      ),
      for (var i = 0; i < userIdsLength; i++)
        _createChatInUserChats(
          chatId: chatId,
          currentUserId: userIds[i],
          otherUserId: null,
        ),
    ]);

    final isAllChatAddedInAllUsers = isChatAddedInAllUsers.fold(
      false,
      (value, isAdded) => value && isAdded,
    );

    if (!isAllChatAddedInAllUsers) {
      await deleteChat(chatId: chatId);
      throw Exception("Operation Failed! Unable to add chat in user's chats");
    }

    return chatId;
  }

  @override
  Future<bool> updateGroupChat({
    String? groupName,
    String? groupProfilePic,
  }) async {
    if (_chatRoomId == null) throw Exception("Chat Room ID can't be null");

    final data = <String, dynamic>{
      if (groupName?.isNotEmpty ?? false) _groupName: groupName,
      if (groupProfilePic != null) _groupPhotoUrl: groupProfilePic,
    };

    if (data.isEmpty) return true;

    try {
      await updateChatRoom(data: data);
      return true;
    } catch (_) {
      return false;
    }
  }

  /// To create one to one chat document at path of 'user_chats/[currentUserId]/chats/[chatId]' .
  Future<bool> _createChatInUserChats({
    required String chatId,
    required String currentUserId,
    required String? otherUserId,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: currentUserId,
      ).doc(chatId).set(UserChatsConversationDm(userId: otherUserId));
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<bool> _deleteChatFromUserChats({
    required String chatId,
    required String currentUserId,
  }) async {
    try {
      await ChatViewFireStoreCollections.userChatsConversationCollection(
        userId: currentUserId,
      ).doc(chatId).delete();
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<String?> _createChatForOneToOne(String otherUserId) async {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    if (currentUserId == null) {
      throw Exception("Current User ID can't be null");
    }

    final chatId = const Uuid().v8();

    final isChatCreated = await _createChat(
      chatId: chatId,
      chatRoom: ChatRoomDm(
        chatId: chatId,
        chatRoomType: ChatRoomType.oneToOne,
      ),
    );

    if (!isChatCreated) return null;

    final result = await Future.wait(
      [
        _addUserInChat(chatId: chatId, userId: currentUserId),
        _addUserInChat(chatId: chatId, userId: otherUserId),
      ],
    );

    final isCurrentUserCreated = result.firstOrNull ?? false;
    final isOtherUserCreated = result.lastOrNull ?? false;

    if (!isCurrentUserCreated && !isOtherUserCreated) {
      return null;
    } else if (isCurrentUserCreated && !isOtherUserCreated) {
      await deleteChat(chatId: chatId);
      return null;
    } else if (isOtherUserCreated && !isCurrentUserCreated) {
      await deleteChat(chatId: chatId);
      return null;
    } else {
      return chatId;
    }
  }

  Future<bool> _addUserInChat({
    required String userId,
    required String chatId,
  }) async {
    try {
      await ChatViewFireStoreCollections.chatUsersCollection(
        _chatRoomCollectionPath(chatId: chatId),
      ).doc(userId).set(
            ChatRoomUserDm(
              chatUser: null,
              userId: userId,
              userStatus: UserStatus.offline,
            ),
          );
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<bool> _createChat({
    required String chatId,
    required ChatRoomDm chatRoom,
  }) async {
    try {
      await ChatViewFireStoreCollections.chatCollection()
          .doc(chatId)
          .set(chatRoom);
      return true;
    } catch (_) {
      return false;
    }
  }

  Future<String?> _isChatExists(String otherUserId) async {
    final currentUserId = ChatViewDbConnection.instance.currentUserId;
    if (currentUserId == null) {
      throw Exception("Current User ID can't be null");
    }

    final chatsSnapshot =
        await ChatViewFireStoreCollections.userChatsConversationCollection(
      userId: currentUserId,
    ).get();

    final docs = chatsSnapshot.docs;
    final docsLength = docs.length;
    for (var i = 0; i < docsLength; i++) {
      final doc = docs[i];
      final userId = doc.data()?.userId;
      if (userId == otherUserId) return doc.id;
    }
    return null;
  }

  Future<bool> _isUserExists(String userId) async {
    final result =
        await ChatViewFireStoreCollections.usersCollection().doc(userId).get();
    return result.exists;
  }

  @override
  Future<bool> deleteChat({
    required String chatId,
    DeleteChatDocsFromStorageCallback? deleteChatDocsFromStorageCallback,
  }) async {
    final chatRoomCollectionPath = _chatRoomCollectionPath(chatId: chatId);

    final userCollection = ChatViewFireStoreCollections.chatUsersCollection(
      chatRoomCollectionPath,
    );

    final usersSnapshot = await userCollection.get();
    final usersSnapshotDocs = usersSnapshot.docs;
    final usersSnapshotDocsLength = usersSnapshotDocs.length;

    // List of asynchronous tasks for removing the chat room from each user's
    // chat list.
    final deletingChatRoomFromUsers = <Future<void>>[];

    // List of asynchronous tasks for removing users from the chat room.
    final deletingUsersFromChatRoom = <Future<void>>[];

    for (var i = 0; i < usersSnapshotDocsLength; i++) {
      final userId = usersSnapshotDocs[i].id;
      deletingChatRoomFromUsers.add(
        ChatViewFireStoreCollections.userChatsConversationCollection(
          userId: userId,
        ).doc(chatId).delete(),
      );
      deletingUsersFromChatRoom.add(
        ChatViewFireStoreCollections.chatUsersCollection(chatRoomCollectionPath)
            .doc(userId)
            .delete(),
      );
    }

    // Removes the chat room from each user's chat list
    // and users from the chat room.
    await Future.wait([
      ...deletingChatRoomFromUsers,
      ...deletingUsersFromChatRoom,
    ]);

    await _deleteNestedChatCollections(chatId);

    /// for deleting chat medias
    await deleteChatDocsFromStorageCallback?.call(chatId);
    return true;
  }

  Future<bool> _deleteNestedChatCollections(String chatId) async {
    try {
      final chatRoomCollectionPath = _chatRoomCollectionPath(chatId: chatId);

      final messagesSnapshot =
          await ChatViewFireStoreCollections.messageCollection(
        chatRoomCollectionPath,
      ).get();

      final messagesSnapshotDocs = messagesSnapshot.docs;
      final messagesSnapshotDocsLength = messagesSnapshotDocs.length;

      await Future.wait([
        for (var i = 0; i < messagesSnapshotDocsLength; i++)
          ChatViewFireStoreCollections.messageCollection(chatRoomCollectionPath)
              .doc(messagesSnapshotDocs[i].id)
              .delete(),
      ]);

      await ChatViewFireStoreCollections.chatCollection().doc(chatId).delete();

      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<bool> updateChatRoom({
    String? chatId,
    Message? lastMessage,
    Map<String, dynamic>? data,
  }) async {
    final newChatId = chatId ?? _chatRoomId;
    if (newChatId == null) throw Exception("Chat Room ID can't be null");

    try {
      await ChatViewFireStoreCollections.chatCollection()
          .doc(newChatId)
          .update(data ?? {_lastMessage: lastMessage?.toJson()});
      return true;
    } catch (_) {
      return false;
    }
  }

  @override
  Future<bool> fetchAndUpdateLastMessage({String? chatId}) async {
    try {
      final messageCollection = ChatViewFireStoreCollections.messageCollection(
        _chatRoomCollectionPath(chatId: chatId),
      )
          .orderBy(
            MessageSortBy.dateTime.key,
            descending: MessageSortOrder.desc.isDesc,
          )
          .limit(1);

      final result = await messageCollection.get();
      final lastMessage = result.docs.lastOrNull?.data();

      return updateChatRoom(chatId: chatId, lastMessage: lastMessage);
    } catch (_) {
      return false;
    }
  }
}
